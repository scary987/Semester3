#include <iostream>
#include <string>
#include <vector>
using namespace std;

void printvektor(int a[], int size )
{   cout <<" { ";
		for (int i = 0; i<size; i++)
		{
			cout<<a[i]<<" ";
		}
		cout <<"}\n ";
}

bool checksyphon(int a[],int size)
{
	bool syph = true;
	/*cout<<"vektor:{ "; //Ein
		for(int i = 0;i<size; i++ )
		{
			cout<<a[i]<<" ";
		}
		cout <<"}\n";*/
	cout<<"Input only Transitionen: "<<endl;
	for(int i = 0; i < size ; i++)
	{
		if(a[i]>0)
		{
			cout<<i<<" ";
			syph= false;
		}
	}
	if(syph)cout<<"Keine. Ist Syphon.";
	cout<<endl;
	return true;
}
bool checktrap(int a[],int size)
{
	bool syph = true;
	/*cout<<"vektor:{ "; //Ein
		for(int i = 0;i<size; i++ )
		{
			cout<<a[i]<<" ";
		}
		cout <<"}\n";*/
	cout<<"Output only Transitionen: "<<endl;
	for(int i = 0; i < size ; i++)
	{
		if(a[i]<0)
		{
			cout<<i<<" ";
			syph= false;
		}
	}
	if(syph)cout<<"Keine. Ist Trap.";
	cout<<endl;
	return true;
}

int* vectoradd(int a[], int b[], int size )
{
	int* c  ;
	c =(int *) malloc(size +1);
	printvektor(a,size);
	cout<<"+\n";
	printvektor(b,size);
	
	for (int i = 0 ; i<size;i++)
	{
		if(a[i]==b[i])c[i]=a[i];  //emulating set unions
		else c[i]=a[i]+b[i];
	}
	cout<<"=\n";
	printvektor(c,size);
	return c;
}
int* vectorsub(int a[], int b[], int size )
{
	int* c  ;
	c =(int *) malloc(size +1);
	printvektor(a,size);
	cout<<"+\n";
	printvektor(b,size);
	
	for (int i = 0 ; i<size;i++)
	{
		if(a[i]==b[i])c[i]=a[i];
		else c[i]=a[i]-b[i];
	}
	cout<<"=\n";
	printvektor(c,size);
	return c;
}

int main()
{   int* temp;
	int* temptemp;
	int* temptemptemp;
	//  int Stelle[] = {+-t0, +-t1, +-t2, +-t3}; +- steht fÃ¼r out oder imput durch transitionen
	int s8 [] = {-1,-1, 1, 1};  //Beim senkrechtem Lesen sieht man die Transitionen, stelle als Input/Output vektor
	int s9 [] = { 1, 0,-1, 0};
	int s10[] = { 0, 0,-1, 1};
	int s11[] = { 0, 1, 0,-1};
	int s12[] = { 0, 0, 1,-1};
	int* places[5];
	places[0]=s8;
	places[1]=s9;
	places[2]=s10;
	places[3]=s11;
	places[4]=s12;
	// 4 stacked loops; a recursive solution following seems only logical
	for(int i = 1 ; i<=5;i++)
	{
		cout<<"Stellen: "<<i+7<<endl;
		checksyphon(places[i-1],4);
		checktrap(places[i-1],4);
		cout<<endl;
		for(int j = i+1 ; j<=5;j++)
		{
			cout<<"Stellen: "<<i+7<<" "<<j+7<<endl;
			temp=vectoradd(places[i-1],places[j-1],4);
			checksyphon(temp,4);
			checktrap(temp,4);
			cout<<endl;
			for(int k = j+1; k<=5;k++)
			{
				
				cout<<"Stellen: "<<i+7<<" "<<j+7<<" "<<k+7<<endl;
				temptemp=vectoradd(temp,places[k-1],4);
				checksyphon(temptemp,4);
				checktrap(temptemp,4);
				for(int l = k+1 ;l<=5;l++)
				{
					cout<<"Stellen: "<<i+7<<" "<<j+7<<" "<<k+7<<" "<<l+7<<endl;
					temptemptemp=vectoradd(temptemp,places[k-1],4);
					checksyphon(temptemptemp,4);
					checktrap(temptemptemp,4);
				}
			}
		}
	}
}

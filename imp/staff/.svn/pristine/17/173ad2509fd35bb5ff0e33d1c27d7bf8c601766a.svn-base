% !TeX spellcheck = de_DE
%% 
%% This is file 'beamer_sample.tex'
%% 	
%% by Mathias Winkel
%%
%% Problems, bugs and comments to 
%% mathias.winkel2@uni-rostock.de
%%
\RequirePackage{fix-cm} % because of font size substituion warnings
\documentclass[10pt]{beamer} % die 10pt sollten festgelegt bleiben, da dies die Groesse der Mathematikschrift etc. beeinflusst

\include{ip2019-setup}

\date{}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\maketitle

\begin{frame}{Anfang}

	\begin{itemize}
		\item Fragen?
		\item SVN-Probleme?
		\item Hausaufgaben angefangen?
	\end{itemize}

\end{frame}

\begin{frame}{Plan für heute}

	\tableofcontents

\end{frame}

\section{Nachbereitung Hausaufgabe 5}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 5.1}

	\begin{lstlisting}[gobble=4]
		int add(int x, int y) {
			if(y==0) return x;
			else return add(x+1,y-1);
		}
		int mlt(int x, int y) {
			if(y==1) return x;
			else return add(mlt(x,y-1),x);
		}
		int pwr(int x, int y) {
			if(y==0) return 1;
			else return mlt(pwr(x,y-1),x);
		}
		
		int main() {
			int z1, z2;
			z1 = add(1, add(1,1)); /* 3 */
			z2 = add(add(add(add(add(add(1,1),1),1),1),1),1); /* 7 */
			printf("pwr(%d, %d) ist %d\n", z1, z2, pwr(z1,z2));	
			return 0;
		}
	\end{lstlisting}

\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 5.3}

	\begin{lstlisting}[gobble=4]
		#include<stdio.h>
		
		int main() {
			double zahl = 0;
			int c = 0;
		
			while((c = getchar())>='0' && c<='9')
				zahl = zahl*10 + (c-'0');
		
			ungetc(c,stdin);
		
			printf("%f\n",zahl);
			return 0;
		}

	\end{lstlisting}

\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 5.4}

	\begin{lstlisting}[gobble=4]
		#include <stdio.h>
		#include <stdlib.h>
		
		char elems[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		int np=0;
		
		void swap(int i, int j) {
		  char tmp = elems[i];
		  elems[i] = elems[j];
		  elems[j] = tmp;
		}
		
	\end{lstlisting}

\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 5.4}

	\begin{lstlisting}[gobble=4]
		void perm(int n) {
		  int i;
		
		  if(n==0) 
		    printf("%d: %s\n",++np,elems);
		
		  else {
		
		    perm(n-1); 
		
		    for(i=n-2;i>=0;--i) {
		      swap(i,n-1);
		      perm(n-1);
		      swap(i,n-1);
		    }
		    
		  }
		}
	\end{lstlisting}

\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 5.4}

	\begin{lstlisting}[gobble=4]
		int main(int argc, char *argv[]) {
		  int n;
		
		  if(argc < 2 || (n = atoi(argv[1])) < 0) {
		    printf("Usage: %s <number-of-elements>\n",argv[0]);
		    return -1;
		  }
		
		  elems[n] = '\0';
		  perm(n);
		  printf("%d permutations\n",np);
		  return 0;
		}
	\end{lstlisting}

\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 5.5}

	\begin{lstlisting}[gobble=4]
		void swap(int *a, int *b) {
		  int tmp = *a;
		  *a = *b;
		  *b = tmp;
		}
		
		void sortiere(int a[], int n) {
		  int swapped = 1;
		  int i;
		
		  while (swapped == 1) {
		    swapped = 0;		
		    for (i = 0; i < n - 1; i++) {		
		      if (a[i] > a[i + 1]) { 		
		        swap(&a[i], &a[i + 1]);		
		        swapped = 1;
		      }
		    }
		  }
		}
	\end{lstlisting}

\end{frame}

\section{Vorbereitung Hausaufgabe 6}

\begin{frame}{Relationen können als Matrizen dargestellt werden}

	Die reflexive transitive Hülle kann in der Matrixdarstellung bestimmt werden.
	Dazu iterativ in jede Stelle $(i,j)$, in der eine $0$ steht, eine $1$ schreiben, wenn es ein $k$ gibt, so dass $(i,k) = 1$ und $(k,j)=1$.
	Am Ende noch die Diagonale $1$ setzen.

	\[ \left( \begin{array}{cccc}
	0 & 0 & 0 & 0\\
	1 & 0 & 0 & 0\\
	0 & 1 & 0 & 0\\
	0 & 0 & 1 & 0\\
	\end{array} \right)
	\onslide<2->{\Rightarrow
	\left( \begin{array}{cccc}
	0 & 0 & 0 & 0\\
	1  & 0 & 0 & 0\\
	{\color{red} 1}  & 1  & 0 & 0\\
	0 & {\color{red} 1}  & 1 & 0\\
	\end{array} \right)
	\onslide<3->{\Rightarrow
	\left( \begin{array}{cccc}
	0 & 0 & 0 & 0\\
	1  & 0 & 0 & 0\\
	1  & 1  & 0 & 0\\
	{\color{red} 1} & 1 & 1 & 0\\
	\end{array} \right)}}\]
	
	\[\onslide<4->{ \left( \begin{array}{cccc}
	0 & 0 & 0 & 0\\
	1 & 0 & 0 & 0\\
	1 & 1 & 0 & 0\\
	1 & 1 & 1 & 0\\
	\end{array} \right)
	\onslide<5->{\Rightarrow
	\left( \begin{array}{cccc}
	{\color{red} 1} & 0 & 0 & 0\\
	1 & {\color{red} 1} & 0 & 0\\
	1 & 1  & {\color{red} 1} & 0\\
	1 & 1 & 1 & {\color{red} 1}\\
	\end{array} \right)}}\]
		
\end{frame}

\begin{frame}{Relationen können als Matrizen dargestellt werden}

	\[ \left( \begin{array}{cccc}
		0 & 0 & 0 & 0\\
		1 & 0 & 0 & 0\\
		0 & 1 & 0 & 0\\
		0 & 0 & 1 & 0\\
		\end{array} \right) \]

	\begin{itemize}
		\item Matrizen können als 2D-Arrays repräsentiert werden
		\item Matrizen für Relationen sind immer quadratisch
	\end{itemize}

\end{frame}

\section{Programmieren}

\begin{frame}{Programmieren}

	\begin{task}{~}
		Lösen Sie die Aufgaben auf dem Arbeitsblatt \texttt{handout09.pdf}.
	\end{task}

\end{frame}

\section{Abschluss}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 2.1}
	
	\begin{lstlisting}[gobble=4]
		#include <stdio.h>
		
		void print(int m[SIZE][SIZE]) {
			int i, j;
			
			for (i = 0; i < SIZE; i++)
				for( j = 0; j < SIZE; j++)
					if(m[i][j] == 1)
						printf("(%d, %d)\n", i, j);
		}
	\end{lstlisting}
	
\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 2.2}
	
	\begin{lstlisting}[gobble=4]
		void successors(int m[SIZE][SIZE]) {
			int i, j;
			for (i = 0; i < SIZE; i++)
				for (j = 0; j < SIZE; j++)
					if (i == j+1)
						m[i][j] = 1;
					else
						m[i][j] = 0;
		}
	\end{lstlisting}
	
\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 3.1}
	
	\begin{lstlisting}[gobble=4]
		#include <stdio.h>
		
		float lb_after_sc() {
			int c, last = 0;
			int breaks = 0, sbreaks = 0;
			
			while((c = getchar()) != EOF) {
				if(c == '\n') {
					breaks++;
					if(last == ';') {
						sbreaks++;
					}
				}
				last = c;
			}
			return sbreaks * 100.0 / breaks;
		}
	\end{lstlisting}
	
\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 3.2}
	
	\begin{lstlisting}[gobble=4]
		#include <stdio.h>
		
		void stats() {
			int c;
			int cur, last, lastlast;
			int i,j,k;
			
			int pairs[10][10];
			int triples[10][10][10];
			
			for(i = 0; i < 10; i++)
				for(j = 0; j < 10; j++) {
					pairs[i][j] = 0;
					for(k = 0; k < 10; k++)
						triples[i][j][k] = 0;
				}
	\end{lstlisting}
	
\end{frame}

\begin{frame}[fragile]{Lösungsvorschlag}{Aufgabe 3.2}
	
	\begin{lstlisting}[gobble=4]
			lastlast = getchar() - '0';
			last = getchar() - '0';
			while ((c = getchar()) != EOF) {
				if (c < 48 || c > 57) continue;
				cur = c - '0';
				pairs[last][cur]++;
				triples[lastlast][last][cur]++;
				lastlast = last;
				last = cur;
			}
			
			for(i = 0; i < 10; i++)
				for(j = 0; j < 10; j++) {
					printf("count(%d, %d) = %d\n", i, j, pairs[i][j]);
					for(k = 0; k < 10; k++)
						printf("count(%d, %d, %d) = %d\n", i, j, k, triples[i][j][k]);
				}
		}
	\end{lstlisting}
	
\end{frame}

	% end of presentation
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% backup slides
	
	\appendix
	\newcounter{finalframe}
	\setcounter{finalframe}{\value{framenumber}}
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% end of backup slides
	\setcounter{framenumber}{\value{finalframe}}
\end{document}


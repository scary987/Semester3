% !TeX spellcheck = de_DE
\documentclass[a4paper]{article}

\include{ip2019-handout-setup}

\begin{document}

	\section{Strukturen und dynamischer Speicher}
	
	\subsection{Die Anweisung \lstinline|malloc| (aus Prüfung WS 17/18)}
	
	Das Allokieren von dynamischen Speicher wird oft mit einer Anweisung der Form \lstinline|malloc(sizeof(...))| umgesetzt. 
	\begin{itemize}
		\item Welche Rolle spielt das Argument, das \lstinline|malloc| erhält? -- die Anzahl zu reservierender Bytes.
		\item Warum wird hier der Operator \lstinline|sizeof| verwendet? -- Um herauszufinden, wie viel Byte ein bestimmter Typ braucht.
		\item Was ist der Rückgabewert von \lstinline|malloc|? -- Eine Referenz auf den reservierten Speicher.
		\item Was passiert, wenn kein Speicher allokiert werden konnte?	-- \lstinline|malloc| gibt \lstinline|NULL| zurück.
	\end{itemize}
	
	\subsection{Zeichenketten mit dynamischer Länge}
	
	\begin{lstlisting}[gobble=4]
		#include <stdio.h>
		#include <stdlib.h>
	
		typedef struct {
			char *author;
			char *title;
		} Book, *BookRef;
		
		void readString(char **ref) {
		  int i, l;
		  char *result;
		  char temp[100];
		  scanf("%99[^\n]%*c", temp);
		  for (l = 0; l < 100 && temp[l] != '\0'; l++);
		  result = malloc((l + 1) * sizeof(char));
		  for (i = 0; i < l; i++) 
		    result[i] = temp[i];
		  *ref = result;
		}
		
		int main() {
			BookRef a;
			a = malloc(sizeof(Book));
			
			readString(&(a->author));
			readString(&(a->title));			
			
			free(a);
			return 0;
		}
	\end{lstlisting}
	
	Anmerkung:
	Die Anweisung \lstinline|scanf("%s", temp);| hat Probleme mit Zeichenketten, die Leerzeichen enthalten, oder wenn mehrere Zeichenketten nacheinander eingelesen werden sollen.
	Darum verwenden wir anstelle von \lstinline|"%s"| einen komplizierteren \emph{format string}: \lstinline|scanf("%99[^\n]%*c", temp);|.
	Dabei liest \lstinline|scanf| in die Variable \lstinline|temp| so lange Zeichen ein, bis ein Zeilenumbruch gelesen wird, aber maximal 99 Zeichen.
	Der Zeilenumbruch wird mittels \lstinline|%*c| verworfen, sodass der Eingabepuffer geleert wird.
	
	\clearpage
	
	\subsection{Brüche}
	
	\begin{lstlisting}[gobble=4]
		#include <stdio.h>
		#include <stdlib.h>
		
		typedef struct {
		  int num;
		  int denom;
		} Rational, *RationalRef;
		
		void print(RationalRef r) {
		  printf("%d/%d", r->num, r->denom);
		}
		
		int gcd(int a, int b) {
		  if (b == 0)
		    return a;
		  return gcd(b, a % b);
		}
		
		void reduce(RationalRef a) {
		  int g = gcd(a->num, a->denom);
		  a->num /= g;
		  a->denom /= g;
		}  
		
		RationalRef add(RationalRef a, RationalRef b) {
		  RationalRef result = malloc(sizeof(Rational));
		  
		  result->denom = a->denom * b->denom;
		  result->num = a->num*b->denom + b->num*a->denom;
		  
		  return result;
		}
		
		int compare(RationalRef a, RationalRef b) {
		  return a->num*b->denom - b->num*a->denom;
		}	
		
		int main(int argc, char *argv[]) {
		  
		  int i;
		  
		  Rational rs[5] = {{1, 2}, {5, 2}, {1, 3}, {1, 4}, {3, 4}};
		
		  qsort(rs, 5, sizeof(Rational), compare);
		  
		  for(i = 0; i < 5; i++) {
		    print(rs + i); printf("\n");
		  }
		  
		  return 0;
		}
	\end{lstlisting}

\end{document}
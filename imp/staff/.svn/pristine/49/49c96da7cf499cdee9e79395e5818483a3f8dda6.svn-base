% !TeX spellcheck = de_DE
%% 
%% This is file 'beamer_sample.tex'
%% 	
%% by Mathias Winkel
%%
%% Problems, bugs and comments to 
%% mathias.winkel2@uni-rostock.de
%%
\RequirePackage{fix-cm} % because of font size substituion warnings
\documentclass[10pt]{beamer} % die 10pt sollten festgelegt bleiben, da dies die Groesse der Mathematikschrift etc. beeinflusst

\include{ip2019-setup}

\date{}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\maketitle

\begin{frame}{Plan f체r heute}

	\tableofcontents

\end{frame}

\section{Strukturen}

\begin{frame}[fragile]{Definition von Strukturen}
	
	\enquote{Schablone} f체r Elemente mit mehreren Variablen
	\begin{itemize}
		\item Person (Name, Alter, Geschlecht) \\
			\begin{lstlisting}[gobble=4]
				struct Person {
					char name[20];
					int age;
					char sex;
				};
			\end{lstlisting}
		\item Buch (Titel, Autor) \\
			\begin{lstlisting}[gobble=4]
				struct Book {
					char title[20];
					char author[20];
				};
			\end{lstlisting}
	\end{itemize}

\end{frame}

\begin{frame}[fragile]{Strukturen sind Datentypen}
	
	\begin{itemize}
		\item Variable vom Typ Book anlegen:
			\begin{lstlisting}[gobble=4]
				struct Book faust = {"Goethe", "Faust I"};
			\end{lstlisting}
		\item Auf Komponenten einer Variable zugreifen:
			\begin{lstlisting}[gobble=4]
				faust.title[7] = 'I';
				faust.title[8] = '\0';
				printf("%s\n", faust.title);
			\end{lstlisting}
		\item Referenz auf eine Variable anlegen
			\begin{lstlisting}[gobble=4]
				struct Book *b = &faust;
			\end{lstlisting}	
		\item Auf Komponenten einer Referenz zugreifen:
			\begin{lstlisting}[gobble=4]
				printf("%s\n", (*b).author);
				printf("%s\n", b->author);
			\end{lstlisting}
						
	\end{itemize}
	
\end{frame}

\begin{frame}[fragile]{Strukturen}{Typdefinition ohne und mit \texttt{typedef}}

	\begin{columns}
		\begin{column}{.4\textwidth}
			\begin{lstlisting}[gobble=8]
				struct Student {
					int nClasses;
					char name[20];
					double gpa; 
				} joe;
				
				struct Student sue;
				
				sue.gpa = 5.0;
			\end{lstlisting}
		\end{column}
		\begin{column}{.4\textwidth}
			\begin{lstlisting}[gobble=8]
				typedef struct {
					int nClasses;
					char name[20];
					double gpa; 
				} Student;
				
				Student joe, sue;
				
				sue.gpa = 5.0;
			\end{lstlisting}
		\end{column}
	\end{columns}
	
\end{frame}

\section{Aufz채hlungstypen}

\begin{frame}[fragile]{Aufz채hlungstypen}{Typdefinition ohne und mit \texttt{typedef}}

	\begin{columns}
		\begin{column}{.4\textwidth}
			\begin{lstlisting}[gobble=8]
				enum suits {
					CLUBS, 
					HEARTS, 
					SPADES, 
					DIAMONDS
				} card1;
					
				enum suits card2;
			\end{lstlisting}
		\end{column}
		\begin{column}{.4\textwidth}
			\begin{lstlisting}[gobble=8]
				typedef enum {
					CLUBS, 
					HEARTS, 
					SPADES, 
					DIAMONDS
				} suit;
					
				suit card1, card2;
			\end{lstlisting}
		\end{column}
	\end{columns}
	
\end{frame}

\section{Funktionsreferenzen}

\begin{frame}[fragile]{Funktionsreferenzen}

	\begin{lstlisting}[gobble=4]
		int times_two(int n) {
			return 2 * n;
		}
		
		void apply(int arr[], int len, int (*fun)(int)) {
			int i;
			for(i = 0; i < len; i++) {
				arr[i] = fun(arr[i]);
			}
		}
			
		int main() {
			int nums[] = {1, 3, 5, 7};
			apply(nums, 4, times_two);
			return 0;
		}
	\end{lstlisting}

\end{frame}

\section{Dynamischer Speicher}

\begin{frame}[fragile]{Dynamischer Speicher}

	\begin{lstlisting}[gobble=4]
		#include <stdlib.h>
		#include <stdio.h>
		
		int main(int argc, char *argv[]) {
			
			int i, size;
			int *arr;
			
			if (argc > 1)
				size = atoi(argv[1]);
			else 
				return 1;
			
			arr = malloc(size * sizeof(int)); /* Speicher allokieren */
			
			for(i = 0; i < size; i++)
				arr[i] = 0;
			
			free(arr); /* Speicher freigeben */
			
			return 0;
		}
	\end{lstlisting}

\end{frame}


	% end of presentation
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% backup slides
	
	\appendix
	\newcounter{finalframe}
	\setcounter{finalframe}{\value{framenumber}}
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% end of backup slides
	\setcounter{framenumber}{\value{finalframe}}
\end{document}


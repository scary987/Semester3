% !TeX spellcheck = de_DE
\documentclass[a4paper]{article}

\include{ip2019-handout-setup}

\begin{document}

	\section{Strukturen und dynamischer Speicher}
	
	\subsection{Die Anweisung \lstinline|malloc| (aus Prüfung WS 17/18)}
	
	Das Allokieren von dynamischen Speicher wird oft mit einer Anweisung der Form \lstinline|malloc(sizeof(...))| umgesetzt. 
	Welche Rolle spielt das Argument, das \lstinline|malloc| erhält? 
	Warum wird hier der Operator \lstinline|sizeof| verwendet? 
	Was ist der Rückgabewert von \lstinline|malloc|? 
	Was passiert, wenn kein Speicher allokiert werden konnte?	
	
	\subsection{Zeichenketten mit dynamischer Länge}
	
	\begin{lstlisting}[gobble=4]
		typedef struct _Book {
			char *author;
			char *title;
		} Book, *BookRef;
		
		main () {
			BookRef a;
			a = malloc(sizeof(Book));
			/* TODO read in values for author and title */
			free(a);
		}
	\end{lstlisting}
	
	Ergänzen Sie das Listing so, dass Autor und Titel verschiedener Längen vom Nutzer eingelesen werden.
	Gehen Sie jeweils wie folgt vor:
	
	\begin{enumerate}
		\item Zunächst wird eine Zeichenkette vom Nutzer eingelesen und in einem Array fester Länge abgelegt.
			Das Array sollte groß genug sein, um die Zeichenkette zwischenzuspeichern.
		\item Stellen Sie fest, wie lang die eingegebene Zeichenkette tatsächlich ist.
			Zur Erinnerung: Strings werden in C mit dem \lstinline|char|-Wert \lstinline|\0| terminiert.
		\item Allokieren Sie genau so viel Speicher, wie die Speicherung der Zeichenkette benötigt.
		\item Kopieren Sie die eingegebene Zeichenkette in den neu allokierten Speicher.
		\item Setzen Sie die Referenz in der \lstinline|Book|-Struktur auf den neu allokierten Speicher.
	\end{enumerate}
	
	\clearpage
	
	\subsection{Brüche}
	
	\begin{enumerate}
		\item Definieren Sie eine Struktur zum Speichern von Brüchen.
			Brüche bestehen aus einem ganzzahligen Zähler und einem ganzzahligen Nenner.
		\item Schreiben Sie eine Prozedur \lstinline|print|, die eine Referenz auf einen Bruch übergeben bekommt und den Bruch ausgibt.
		\item Schreiben Sie eine Prozedur \lstinline|reduce|, die eine Referenz auf einen Bruch übergeben bekommt und den Bruch kürzt.
		\item Schreiben Sie eine Funktion \lstinline|add|, die zwei Referenzen auf Brüche übergeben bekommt und eine Referenz auf die Summe beider Brüche zurückgibt.
			Achten Sie darauf, die vorhandenen Brüche nicht zu überschreiben.
	
			Nun sollte die \lstinline|main|-Funktion links die Ausgabe rechts liefern.
			
			\begin{minipage}[t][][b]{0.65\textwidth}
			\begin{lstlisting}[gobble=8]
				int main() {		
				  Rational r1 = {1, 2};
				  Rational r2 = {1, 3};
				  Rational r3 = {2, 3};
				
				  RationalRef sum = add(add(&r1, &r2), &r3);
				  
				  printf("sum is: "); print(sum); printf("\n");
				  
				  reduce(sum);
				  
				  printf("reduced sum is: "); print(sum); printf("\n");
				  
				  return 0;
				}
			\end{lstlisting}
			\end{minipage}\qquad
			\begin{minipage}[t][][b]{0.25\textwidth}
			\begin{lstlisting}[gobble=8]
				sum is: 27/18
				reduced sum is: 3/2
			\end{lstlisting}
			\end{minipage}
	
		\item Schreiben Sie eine Funktion \lstinline|compare|, die zwei Referenzen auf Brüche übergeben bekommt und
			\begin{itemize}
				\item 0 zurückgibt, wenn beide Brüche gleich sind,
				\item eine Zahl < 0 zurückgibt, wenn der erste Bruch kleiner ist als der zweite, und
				\item eine Zahl > 0 zurückgibt, wenn der erste Bruch größer ist als der zweite.
			\end{itemize}
		\item Nutzen Sie die Bibliotheksfunktion \lstinline|qsort| und Ihre Funktion \lstinline|compare| um ein Feld von Brüchen zu sortieren (wie in Vorlesung auf den Folien 185ff. gezeigt).

			Nun sollte die \lstinline|main|-Funktion links die Ausgabe rechts liefern.
			
			\begin{minipage}[t][][b]{0.65\textwidth}
			\begin{lstlisting}[gobble=8]
				int main() {		
					int i;
					
					Rational rs[5] = {{1, 2}, {5, 2}, {1, 3}, {1, 4}, {3, 4}};
					
					qsort(rs, 5, sizeof(Rational), compare);
					
					for(i = 0; i < 5; i++) {
						print(rs + i); printf("\n");
					}
					
					return 0;
				}
			\end{lstlisting}
			\end{minipage}\qquad
			\begin{minipage}[t][][b]{0.25\textwidth}
			\begin{lstlisting}[gobble=8]
				1/4
				1/3
				1/2
				3/4
				5/2
			\end{lstlisting}
			\end{minipage}		
	
	\end{enumerate}

\end{document}